module vga_sync
	(
		input clk, reset,
		output hsync, vsync, video_on , p_tick,
		output wire [9:0] x, y
	);
	
	localparam H_DISPLAY  		=640;//horizontal display area
	localparam H_L_BORDER 		=48 ;//horizontal left border
	localparam H_R_BORDER 		=16 ;//horizontal right border
	localparam H_RETRACE  		=96 ;//horizontal retrace
	localparam H_MAX      		=H_DISPLAY + H_L_BORDER + H_R_BORDER + H_RETRACE - 1;
	localparam START_H_RETRACE =H_DISPLAY + H_R_BORDER;
	localparam END_H_RETRACE 	=H_DISLAY + H_R_BORDER + H_RETRACE - 1;
	
	localparam V_DISPLAY       = 480; // vertical display area
	localparam V_T_BORDER      =  10; // vertical top border
	localparam V_B_BORDER      =  33; // vertical bottom border
	localparam V_RETRACE       =   2; // vertical retrace
	localparam V_MAX           = V_DISPLAY + V_T_BORDER + V_B_BORDER + V_RETRACE - 1;
   localparam START_V_RETRACE = V_DISPLAY + V_B_BORDER;
	localparam END_V_RETRACE   = V_DISPLAY + V_B_BORDER + V_RETRACE - 1;
	
	//downgrade 50MHz to 25MHz 
	reg pixel_reg;
	wire pixel_next, pixel_tick;
	always @(posedge clk)
		pixel_reg<=pixel_next;
	assign	pixel_next = ~pixel_reg,
				pixel_tick = (pixel_reg == 0 );
				
	
	
	//to keep track of the current pixel location
	reg [9:0] h_count_reg, h_count_next, v_count_reg, v_count_next;
	
	//to keep track of vsync and hsync signal states
	reg vsync_reg, hsync_reg;
	wire vsync_next, hsync_next;
	
	//infer registers
	always @(posedge clk, posedge reset)
		if(reset)
			begin
			v_count_reg	<=0;
			h_count_reg	<=0;
			vsync_reg	<=0;
			hsync_reg	<=0;
			end
		else
			begin
			v_count_reg	<= v_count_next;
			h_count_reg	<= h_count_next;
			vsync_reg	<= vsync_next;
			hsync_reg	<= hsync_next;
			end
			
	//next_state logic of horizontal vertical sync counters
	
	always @*
			begin
			h_count_next = pixel_tick ? h_count_reg == H_MAX ? 0
	
				
	
		
		