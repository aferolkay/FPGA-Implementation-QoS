// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/01/2022 17:38:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vga_sync
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vga_sync_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vga_sync_vlg_check_tst (
	hsync,
	p_tick,
	video_on,
	vsync,
	x,
	y,
	sampler_rx
);
input  hsync;
input  p_tick;
input  video_on;
input  vsync;
input [9:0] x;
input [9:0] y;
input sampler_rx;

reg  hsync_expected;
reg  p_tick_expected;
reg  video_on_expected;
reg  vsync_expected;
reg [9:0] x_expected;
reg [9:0] y_expected;

reg  hsync_prev;
reg  p_tick_prev;
reg  video_on_prev;
reg  vsync_prev;
reg [9:0] x_prev;
reg [9:0] y_prev;

reg  hsync_expected_prev;
reg  p_tick_expected_prev;
reg  video_on_expected_prev;
reg  vsync_expected_prev;
reg [9:0] x_expected_prev;
reg [9:0] y_expected_prev;

reg  last_hsync_exp;
reg  last_p_tick_exp;
reg  last_video_on_exp;
reg  last_vsync_exp;
reg [9:0] last_x_exp;
reg [9:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	hsync_prev = hsync;
	p_tick_prev = p_tick;
	video_on_prev = video_on;
	vsync_prev = vsync;
	x_prev = x;
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	hsync_expected_prev = hsync_expected;
	p_tick_expected_prev = p_tick_expected;
	video_on_expected_prev = video_on_expected;
	vsync_expected_prev = vsync_expected;
	x_expected_prev = x_expected;
	y_expected_prev = y_expected;
end



// expected hsync
initial
begin
	hsync_expected = 1'bX;
	hsync_expected = #999000 1'b0;
end 

// expected p_tick
initial
begin
	p_tick_expected = 1'bX;
	p_tick_expected = #999000 1'b0;
end 

// expected video_on
initial
begin
	video_on_expected = 1'bX;
	video_on_expected = #999000 1'b0;
end 

// expected vsync
initial
begin
	vsync_expected = 1'bX;
	vsync_expected = #999000 1'b0;
end 
// expected x[ 9 ]
initial
begin
	x_expected[9] = 1'bX;
	x_expected[9] = #999000 1'b0;
end 
// expected x[ 8 ]
initial
begin
	x_expected[8] = 1'bX;
	x_expected[8] = #999000 1'b0;
end 
// expected x[ 7 ]
initial
begin
	x_expected[7] = 1'bX;
	x_expected[7] = #999000 1'b0;
end 
// expected x[ 6 ]
initial
begin
	x_expected[6] = 1'bX;
	x_expected[6] = #999000 1'b0;
end 
// expected x[ 5 ]
initial
begin
	x_expected[5] = 1'bX;
	x_expected[5] = #999000 1'b0;
end 
// expected x[ 4 ]
initial
begin
	x_expected[4] = 1'bX;
	x_expected[4] = #999000 1'b0;
end 
// expected x[ 3 ]
initial
begin
	x_expected[3] = 1'bX;
	x_expected[3] = #999000 1'b0;
end 
// expected x[ 2 ]
initial
begin
	x_expected[2] = 1'bX;
	x_expected[2] = #999000 1'b0;
end 
// expected x[ 1 ]
initial
begin
	x_expected[1] = 1'bX;
	x_expected[1] = #999000 1'b0;
end 
// expected x[ 0 ]
initial
begin
	x_expected[0] = 1'bX;
	x_expected[0] = #999000 1'b0;
end 
// expected y[ 9 ]
initial
begin
	y_expected[9] = 1'bX;
	y_expected[9] = #999000 1'b0;
end 
// expected y[ 8 ]
initial
begin
	y_expected[8] = 1'bX;
	y_expected[8] = #999000 1'b0;
end 
// expected y[ 7 ]
initial
begin
	y_expected[7] = 1'bX;
	y_expected[7] = #999000 1'b0;
end 
// expected y[ 6 ]
initial
begin
	y_expected[6] = 1'bX;
	y_expected[6] = #999000 1'b0;
end 
// expected y[ 5 ]
initial
begin
	y_expected[5] = 1'bX;
	y_expected[5] = #999000 1'b0;
end 
// expected y[ 4 ]
initial
begin
	y_expected[4] = 1'bX;
	y_expected[4] = #999000 1'b0;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
	y_expected[3] = #999000 1'b0;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
	y_expected[2] = #999000 1'b0;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
	y_expected[1] = #999000 1'b0;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
	y_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(hsync_expected or hsync or p_tick_expected or p_tick or video_on_expected or video_on or vsync_expected or vsync or x_expected or x or y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hsync = %b | expected p_tick = %b | expected video_on = %b | expected vsync = %b | expected x = %b | expected y = %b | ",hsync_expected_prev,p_tick_expected_prev,video_on_expected_prev,vsync_expected_prev,x_expected_prev,y_expected_prev);
	$display("| real hsync = %b | real p_tick = %b | real video_on = %b | real vsync = %b | real x = %b | real y = %b | ",hsync_prev,p_tick_prev,video_on_prev,vsync_prev,x_prev,y_prev);
`endif
	if (
		( hsync_expected_prev !== 1'bx ) && ( hsync_prev !== hsync_expected_prev )
		&& ((hsync_expected_prev !== last_hsync_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hsync_expected_prev);
		$display ("     Real value = %b", hsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hsync_exp = hsync_expected_prev;
	end
	if (
		( p_tick_expected_prev !== 1'bx ) && ( p_tick_prev !== p_tick_expected_prev )
		&& ((p_tick_expected_prev !== last_p_tick_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p_tick :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p_tick_expected_prev);
		$display ("     Real value = %b", p_tick_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p_tick_exp = p_tick_expected_prev;
	end
	if (
		( video_on_expected_prev !== 1'bx ) && ( video_on_prev !== video_on_expected_prev )
		&& ((video_on_expected_prev !== last_video_on_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port video_on :: @time = %t",  $realtime);
		$display ("     Expected value = %b", video_on_expected_prev);
		$display ("     Real value = %b", video_on_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_video_on_exp = video_on_expected_prev;
	end
	if (
		( vsync_expected_prev !== 1'bx ) && ( vsync_prev !== vsync_expected_prev )
		&& ((vsync_expected_prev !== last_vsync_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vsync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vsync_expected_prev);
		$display ("     Real value = %b", vsync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_vsync_exp = vsync_expected_prev;
	end
	if (
		( x_expected_prev[0] !== 1'bx ) && ( x_prev[0] !== x_expected_prev[0] )
		&& ((x_expected_prev[0] !== last_x_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[0] = x_expected_prev[0];
	end
	if (
		( x_expected_prev[1] !== 1'bx ) && ( x_prev[1] !== x_expected_prev[1] )
		&& ((x_expected_prev[1] !== last_x_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[1] = x_expected_prev[1];
	end
	if (
		( x_expected_prev[2] !== 1'bx ) && ( x_prev[2] !== x_expected_prev[2] )
		&& ((x_expected_prev[2] !== last_x_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[2] = x_expected_prev[2];
	end
	if (
		( x_expected_prev[3] !== 1'bx ) && ( x_prev[3] !== x_expected_prev[3] )
		&& ((x_expected_prev[3] !== last_x_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[3] = x_expected_prev[3];
	end
	if (
		( x_expected_prev[4] !== 1'bx ) && ( x_prev[4] !== x_expected_prev[4] )
		&& ((x_expected_prev[4] !== last_x_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[4] = x_expected_prev[4];
	end
	if (
		( x_expected_prev[5] !== 1'bx ) && ( x_prev[5] !== x_expected_prev[5] )
		&& ((x_expected_prev[5] !== last_x_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[5] = x_expected_prev[5];
	end
	if (
		( x_expected_prev[6] !== 1'bx ) && ( x_prev[6] !== x_expected_prev[6] )
		&& ((x_expected_prev[6] !== last_x_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[6] = x_expected_prev[6];
	end
	if (
		( x_expected_prev[7] !== 1'bx ) && ( x_prev[7] !== x_expected_prev[7] )
		&& ((x_expected_prev[7] !== last_x_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[7] = x_expected_prev[7];
	end
	if (
		( x_expected_prev[8] !== 1'bx ) && ( x_prev[8] !== x_expected_prev[8] )
		&& ((x_expected_prev[8] !== last_x_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[8] = x_expected_prev[8];
	end
	if (
		( x_expected_prev[9] !== 1'bx ) && ( x_prev[9] !== x_expected_prev[9] )
		&& ((x_expected_prev[9] !== last_x_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x_exp[9] = x_expected_prev[9];
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( y_expected_prev[4] !== 1'bx ) && ( y_prev[4] !== y_expected_prev[4] )
		&& ((y_expected_prev[4] !== last_y_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[4] = y_expected_prev[4];
	end
	if (
		( y_expected_prev[5] !== 1'bx ) && ( y_prev[5] !== y_expected_prev[5] )
		&& ((y_expected_prev[5] !== last_y_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[5] = y_expected_prev[5];
	end
	if (
		( y_expected_prev[6] !== 1'bx ) && ( y_prev[6] !== y_expected_prev[6] )
		&& ((y_expected_prev[6] !== last_y_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[6] = y_expected_prev[6];
	end
	if (
		( y_expected_prev[7] !== 1'bx ) && ( y_prev[7] !== y_expected_prev[7] )
		&& ((y_expected_prev[7] !== last_y_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[7] = y_expected_prev[7];
	end
	if (
		( y_expected_prev[8] !== 1'bx ) && ( y_prev[8] !== y_expected_prev[8] )
		&& ((y_expected_prev[8] !== last_y_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[8] = y_expected_prev[8];
	end
	if (
		( y_expected_prev[9] !== 1'bx ) && ( y_prev[9] !== y_expected_prev[9] )
		&& ((y_expected_prev[9] !== last_y_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y_exp[9] = y_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vga_sync_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire hsync;
wire p_tick;
wire video_on;
wire vsync;
wire [9:0] x;
wire [9:0] y;

wire sampler;                             

// assign statements (if any)                          
vga_sync i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.hsync(hsync),
	.p_tick(p_tick),
	.reset(reset),
	.video_on(video_on),
	.vsync(vsync),
	.x(x),
	.y(y)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

vga_sync_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

vga_sync_vlg_check_tst tb_out(
	.hsync(hsync),
	.p_tick(p_tick),
	.video_on(video_on),
	.vsync(vsync),
	.x(x),
	.y(y),
	.sampler_rx(sampler)
);
endmodule

